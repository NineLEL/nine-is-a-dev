---
// src/components/Home.astro
import Game from "../components/Vue/Game.vue"; // Import the Vue component

// Props for customization (optional but recommended)
interface Props {
  name?: string;
  title?: string[]; // Changed title to accept an array of strings
  description?: string;
  contactLink?: string;
  githubLink?: string;
  discordLink?: string;
}

const {
  name = "Nine", // Default name
  title = ["Developer", "Gamer", "Student"], // Default title array for typewriter
  contactLink = "#contacts", // Default link for Contact Me
  githubLink = "https://github.com/NineLEL", // Default link for GitHub
  discordLink = "#", // Default link for Discord
} = Astro.props;

// Ensure title is always an array, even if a single string is passed
const typewriterWords = Array.isArray(title) ? title : [title];
---

<section
  id="home"
  class="min-h-screen flex flex-col md:flex-row items-center gap-12 lg:gap-16 w-full max-w-6xl mx-auto px-4 py-16 md:py-24 relative"
>
  <div
    class="w-full md:w-1/2 text-center md:text-left order-1 md:order-1 mt-10 md:pr-6 lg:pr-8"
  >
    <h1
      class="text-4xl sm:text-5xl md:text-4xl lg:text-6xl font-bold !leading-tight mb-1"
    >
      Hello, I'm <span
        class="bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent"
        >{name}</span
      >
    </h1>
    <h2
      class="text-3xl sm:text-4xl md:text-4xl lg:text-6xl font-bold !leading-tight mb-6 h-[1.5em] sm:h-[1.3em]"
    >
      I'm a <span
        class="bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent"
        id="typewriter-text"></span><span
        id="typewriter-cursor"
        class="bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent animate-blink"
        >_</span
      >
    </h2>

    <div
      class="flex flex-wrap justify-center md:justify-start items-center gap-3 sm:gap-4 font-mono mt-8"
    >
      <a
        href={contactLink}
        class="btn btn-primary rounded-lg text-sm sm:text-base"
      >
        Contact Me!
      </a>
      <a
        href={githubLink}
        target="_blank"
        rel="noopener noreferrer"
        class="btn btn-neutral rounded-lg text-sm sm:text-base flex items-center gap-2"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="currentColor"
          ><path
            d="M12,2A10,10 0 0,0 2,12C2,16.42 4.87,20.17 8.84,21.5C9.34,21.58 9.5,21.27 9.5,21C9.5,20.77 9.5,20.14 9.5,19.31C6.73,19.91 6.14,17.97 6.14,17.97C5.68,16.81 5.03,16.5 5.03,16.5C4.12,15.88 5.1,15.9 5.1,15.9C6.1,15.97 6.63,16.93 6.63,16.93C7.5,18.45 8.97,18 9.54,17.76C9.63,17.11 9.89,16.67 10.17,16.42C7.95,16.17 5.62,15.31 5.62,11.5C5.62,10.39 6,9.5 6.65,8.79C6.55,8.54 6.2,7.5 6.75,6.15C6.75,6.15 7.59,5.88 9.5,7.17C10.29,6.95 11.15,6.84 12,6.84C12.85,6.84 13.71,6.95 14.5,7.17C16.41,5.88 17.25,6.15 17.25,6.15C17.8,7.5 17.45,8.54 17.35,8.79C18,9.5 18.38,10.39 18.38,11.5C18.38,15.32 16.04,16.16 13.81,16.41C14.17,16.72 14.5,17.33 14.5,18.26C14.5,19.6 14.5,20.68 14.5,21C14.5,21.27 14.66,21.59 15.17,21.5C19.14,20.16 22,16.42 22,12A10,10 0 0,0 12,2Z"
          ></path></svg
        >
        Github
      </a>
      <a
        href={discordLink}
        target="_blank"
        rel="noopener noreferrer"
        class="btn btn-neutral rounded-lg text-sm sm:text-base flex items-center gap-2"
      >
        <svg
          width="20"
          height="20"
          viewBox="0 -28.5 256 256"
          version="1.1"
          xmlns="http://www.w3.org/2000/svg"
          fill="currentColor"
        >
          <g>
            <path
              d="M216.856339,16.5966031 C200.285002,8.84328665 182.566144,3.2084988 164.041564,0 C161.766523,4.11318106 159.108624,9.64549908 157.276099,14.0464379 C137.583995,11.0849896 118.072967,11.0849896 98.7430163,14.0464379 C96.9108417,9.64549908 94.1925838,4.11318106 91.8971895,0 C73.3526068,3.2084988 55.6133949,8.86399117 39.0420583,16.6376612 C5.61752293,67.146514 -3.4433191,116.400813 1.08711069,164.955721 C23.2560196,181.510915 44.7403634,191.567697 65.8621325,198.148576 C71.0772151,190.971126 75.7283628,183.341335 79.7352139,175.300261 C72.104019,172.400575 64.7949724,168.822202 57.8887866,164.667963 C59.7209612,163.310589 61.5131304,161.891452 63.2445898,160.431257 C105.36741,180.133187 151.134928,180.133187 192.754523,160.431257 C194.506336,161.891452 196.298154,163.310589 198.110326,164.667963 C191.183787,168.842556 183.854737,172.420929 176.223542,175.320965 C180.230393,183.341335 184.861538,190.991831 190.096624,198.16893 C211.238746,191.588051 232.743023,181.531619 254.911949,164.955721 C260.227747,108.668201 245.831087,59.8662432 216.856339,16.5966031 Z M85.4738752,135.09489 C72.8290281,135.09489 62.4592217,123.290155 62.4592217,108.914901 C62.4592217,94.5396472 72.607595,82.7145587 85.4738752,82.7145587 C98.3405064,82.7145587 108.709962,94.5189427 108.488529,108.914901 C108.508531,123.290155 98.3405064,135.09489 85.4738752,135.09489 Z M170.525237,135.09489 C157.88039,135.09489 147.510584,123.290155 147.510584,108.914901 C147.510584,94.5396472 157.658606,82.7145587 170.525237,82.7145587 C183.391518,82.7145587 193.761324,94.5189427 193.539891,108.914901 C193.539891,123.290155 183.391518,135.09489 170.525237,135.09489 Z"
            >
            </path>
          </g>
        </svg>
        Discord
      </a>
    </div>
  </div>

  <div
    class="w-full md:w-1/2 flex justify-center items-center mt-10 md:mt-0 order-2 md:order-2"
  >
    <Game client:visible />
  </div>

  <a
    href="#about"
    class="scroll-down absolute bottom-4 left-1/2 flex w-auto -translate-x-1/2 transform items-center justify-center p-2"
    aria-label="Scroll Down to About"
    id="scrollLink"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-6 w-6 animate-bounce text-current"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
      stroke-width="2"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M19 13l-7 7-7-7m14-8l-7 7-7-7"></path>
    </svg>
  </a>
</section>

<style>
  /* Basic blink animation */
  @keyframes blink {
    0%,
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0;
    }
  }
  .animate-blink {
    animation: blink 1s step-end infinite;
  }
</style>

<script define:vars={{ typewriterWords }}>
  // Typewriter script remains the same
  const textElement = document.getElementById("typewriter-text");
  const cursorElement = document.getElementById("typewriter-cursor");

  if (
    textElement &&
    cursorElement &&
    typewriterWords &&
    typewriterWords.length > 0
  ) {
    let wordIndex = 0;
    let charIndex = 0;
    let isDeleting = false;

    const typingSpeed = 150; // Speed of typing
    const deletingSpeed = 100; // Speed of deleting
    const delayBetweenWords = 1500; // Pause after typing a word

    function type() {
      const currentWord = typewriterWords[wordIndex];
      let displayText = "";

      if (isDeleting) {
        displayText = currentWord.substring(0, charIndex - 1);
        charIndex--;
      } else {
        displayText = currentWord.substring(0, charIndex + 1);
        charIndex++;
      }

      textElement.textContent = displayText;
      cursorElement.style.display = "inline";

      let time = isDeleting ? deletingSpeed : typingSpeed;

      if (!isDeleting && charIndex === currentWord.length) {
        time = delayBetweenWords;
        isDeleting = true;
      } else if (isDeleting && charIndex === 0) {
        isDeleting = false;
        wordIndex++;
        if (wordIndex === typewriterWords.length) {
          wordIndex = 0;
        }
        time = 500;
      }

      setTimeout(type, time);
    }
    setTimeout(type, 500);
  } else if (cursorElement) {
    cursorElement.style.display = "inline";
  }

  // Smooth scroll for the scroll-down link
  const scrollLink = document.getElementById("scrollLink");
  // Find the target section dynamically using the href attribute
  const targetId = scrollLink?.getAttribute("href")?.substring(1); // Get 'about' from '#about'
  const targetSection = targetId ? document.getElementById(targetId) : null;

  if (scrollLink && targetSection) {
    scrollLink.addEventListener("click", (event) => {
      event.preventDefault(); // Prevent default anchor jump
      targetSection.scrollIntoView({ behavior: "smooth" });
    });
  } else {
    // console.error("Scroll link or target section not found for smooth scroll.");
  }
</script>
