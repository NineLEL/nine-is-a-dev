---
// src/components/NavBar.astro
const navLinks = [
  { href: "#about", label: "About" },
  { href: "#projects", label: "Projects" },
  { href: "#services", label: "Services" },
  { href: "#contacts", label: "Contacts" },
];
---

<div
  class="navbar fixed left-0 top-0 z-50 w-full bg-base-100/80 shadow-md backdrop-blur-lg border-b border-base-content/10"
>
  <div class="navbar-start">
    <div class="dropdown">
      <label
        tabindex="0"
        class="btn btn-ghost rounded-md lg:hidden transition hover:bg-base-content/10 focus:bg-base-content/10"
        aria-label="Open menu"
        id="mobile-menu-button"
        aria-expanded="false"
        aria-controls="mobile-menu"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h8m-8 6h16"></path>
        </svg>
      </label>

      <ul
        tabindex="-1"
        class="menu dropdown-content menu-md z-[1] mt-3 w-52 rounded-box bg-base-200 p-2 shadow-xl
               origin-top-left scale-95 opacity-0 transition-all duration-200 ease-out
               invisible pointer-events-none"
        aria-label="Main menu"
        id="mobile-menu"
        role="menu"
      >
        {
          navLinks.map((link) => (
            <li role="none">
              <a
                href={link.href}
                class="nav-link text-base font-medium transition-colors hover:text-primary"
                data-target-id={link.href.substring(1)}
                role="menuitem"
              >
                {link.label}
              </a>
            </li>
          ))
        }
      </ul>
    </div>

    <a
      href="#home"
      class="btn btn-ghost rounded-md text-3xl font-extrabold normal-case
             bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent
             transition duration-300 ease-in-out hover:opacity-80"
      aria-label="Go to top of page">Nine</a
    >
  </div>

  <div class="navbar-center hidden lg:flex">
    <ul class="menu menu-horizontal space-x-1 px-1">
      {
        navLinks.map((link) => (
          <li>
            <a
              href={link.href}
              class="nav-link rounded-md px-4 py-2 text-base font-medium transition-colors hover:text-primary active:!bg-primary/20"
              data-target-id={link.href.substring(1)}
            >
              {link.label}
            </a>
          </li>
        ))
      }
    </ul>
  </div>

  <div class="navbar-end flex items-center space-x-2 sm:space-x-4">
    <label
      for="theme-switcher"
      class="swap swap-rotate btn btn-ghost btn-circle"
      aria-label="Toggle theme"
    >
      <input
        type="checkbox"
        id="theme-switcher"
        class="hidden"
        aria-label="Theme controller"
      />
      <svg
        class="swap-on h-5 w-5 sm:h-6 sm:w-6 fill-current"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        ><path
          d="M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z"
        ></path></svg
      >
      <svg
        class="swap-off h-5 w-5 sm:h-6 sm:w-6 fill-current"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        ><path
          d="M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z"
        ></path></svg
      >
    </label>
    <div>
      <a
        href="#contacts"
        class="btn btn-primary btn-outline rounded-md text-base sm:text-lg"
        >Contacts</a
      >
    </div>
  </div>
</div>

<script is:inline>
  // Mobile Menu & Scrollspy Logic
  const mobileMenuButton = document.getElementById("mobile-menu-button");
  const mobileMenu = document.getElementById("mobile-menu");
  const allNavLinks = document.querySelectorAll(".nav-link");

  let isMobileMenuOpen = false;

  function setMobileMenuOpen(isOpen) {
    isMobileMenuOpen = isOpen;
    if (mobileMenuButton) {
      mobileMenuButton.setAttribute("aria-expanded", isOpen.toString());
    }
    if (mobileMenu) {
      if (isOpen) {
        mobileMenu.classList.remove(
          "scale-95", "opacity-0", "invisible", "pointer-events-none"
        );
        mobileMenu.classList.add(
          "scale-100", "opacity-100", "visible", "pointer-events-auto"
        );
        // Optional: Focus first item when opened for better keyboard nav
        // const firstLink = mobileMenu.querySelector('a');
        // if (firstLink) firstLink.focus();
      } else {
        mobileMenu.classList.add(
          "scale-95", "opacity-0", "invisible", "pointer-events-none"
        );
        mobileMenu.classList.remove(
          "scale-100", "opacity-100", "visible", "pointer-events-auto"
        );
        // Optional: Return focus to the toggle button when closing
        // if (mobileMenuButton) mobileMenuButton.focus();
      }
    }
  }

  if (mobileMenuButton) {
    mobileMenuButton.addEventListener("click", (e) => {
      e.stopPropagation();
      setMobileMenuOpen(!isMobileMenuOpen);
    });
  }

  if (mobileMenu) {
    // Close menu when clicking a link inside it
    mobileMenu.addEventListener("click", (event) => {
      if (event.target.tagName === "A" && event.target.closest(".nav-link")) {
        setMobileMenuOpen(false);
        // Optional: Return focus to button after selection
        // if (mobileMenuButton) mobileMenuButton.focus();
      }
    });
    // Handle Esc key to close menu
    mobileMenu.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
            setMobileMenuOpen(false);
            if (mobileMenuButton) mobileMenuButton.focus(); // Return focus
        }
    });
  }

  // Close menu when clicking outside
  document.addEventListener("click", (event) => {
    if (
      isMobileMenuOpen &&
      mobileMenu &&
      mobileMenuButton &&
      !mobileMenu.contains(event.target) &&
      !mobileMenuButton.contains(event.target)
    ) {
      setMobileMenuOpen(false);
    }
  });

  // Scrollspy logic
  const sectionsData = [
    { id: "home" }, { id: "about" }, { id: "projects" },
    { id: "services" }, { id: "contacts" },
  ];
  const sectionElements = sectionsData
    .map(s => ({ ...s, element: document.getElementById(s.id) }))
    .filter(s => s.element);

  function handleScroll() {
    const scrollThreshold = window.innerHeight * 0.4;
    let currentActiveSectionId = null;

    for (const section of sectionElements) {
      if (section.element) {
        const rect = section.element.getBoundingClientRect();
        if (rect.top <= scrollThreshold && rect.bottom >= scrollThreshold) {
          currentActiveSectionId = section.id;
          break;
        }
      }
    }
    // Fallback for top of page
    if (!currentActiveSectionId && window.scrollY < window.innerHeight * 0.8) {
      currentActiveSectionId = "home";
    }

    // Update nav link styles
    allNavLinks.forEach((link) => {
      const targetId = link.dataset.targetId;
      if (targetId === currentActiveSectionId) {
        link.classList.add("text-primary", "!font-semibold");
      } else {
        link.classList.remove("text-primary", "!font-semibold");
      }
    });
  }

  let scrollTimeout;
  window.addEventListener("scroll", () => {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(handleScroll, 50); // Debounce scroll handler
    }, { passive: true });

  document.addEventListener("DOMContentLoaded", handleScroll); // Initial check
</script>

<script is:inline>
  // Theme Toggle Logic
  const themeToggle = document.getElementById("theme-switcher");
  const htmlElement = document.documentElement;

  if (themeToggle instanceof HTMLInputElement) {
    function applyTheme(theme) {
      // Set daisyUI theme and potentially a class for non-daisyUI styling
      htmlElement.dataset.theme = theme;
      if (theme === "dark") {
        htmlElement.classList.add("dark");
        themeToggle.checked = false; // swap-on is moon (dark)
      } else {
        htmlElement.classList.remove("dark");
        themeToggle.checked = true; // swap-off is sun (light)
      }
    }

    document.addEventListener("DOMContentLoaded", () => {
      const storedTheme = localStorage.getItem("theme");
      const initialTheme = storedTheme || (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light");
      applyTheme(initialTheme);
    });

    themeToggle.addEventListener("change", () => {
      const newTheme = themeToggle.checked ? "light" : "dark";
      applyTheme(newTheme);
      try {
        localStorage.setItem("theme", newTheme);
      } catch (e) {
        console.error("LocalStorage access error.", e);
      }
    });
  } else {
    console.error("Theme toggle element not found.");
  }
</script>