---
import "../styles/global.css";
import NavBar from "../components/NavBar.astro";

interface Props {
  title: string;
  description: string;
  ogImageUrl?: string;
  ogUrl?: string;
}

const {
  title = "Nine | Personal Website",
  description = "Hi, I'm Nine. Welcome to my personal portfolio...",
  ogImageUrl,
  ogUrl = Astro.url.toString(),
} = Astro.props;

const siteName = "Nine's Personal Website";
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, viewport-fit=cover"
    />
    <meta name="description" content={description} />
    <title>{title}</title>

    <link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <meta name="apple-mobile-web-app-title" content="Nine" />
    <link rel="manifest" href="/site.webmanifest" />

    <meta name="generator" content={Astro.generator} />

    <meta id="theme-color-meta" name="theme-color" content="#1D232A" />

    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    {ogImageUrl && <meta property="og:image" content={ogImageUrl} />}
    <meta property="og:url" content={ogUrl} />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content={siteName} />

    <slot name="head" />

    <script is:inline>
      const theme = (() => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          return "dark";
        }
        return "light";
      })();

      if (theme === "dark") {
        document.documentElement.classList.add("dark");
        document.documentElement.dataset.theme = "dark";
      } else {
        document.documentElement.classList.remove("dark");
        document.documentElement.dataset.theme = "light";
      }
      window.initialTheme = theme;

      // Set initial theme-color meta tag
      const themeColorMeta = document.getElementById("theme-color-meta");
      if (themeColorMeta) {
        themeColorMeta.content = theme === "dark" ? "#1D232A" : "#FFFFFF";
      }

      // Watch for theme changes and update meta tag
      const observer = new MutationObserver(() => {
        const currentTheme = document.documentElement.dataset.theme;
        if (themeColorMeta && currentTheme) {
          themeColorMeta.content =
            currentTheme === "dark" ? "#1D232A" : "#FFFFFF";
        }
      });

      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["data-theme"],
      });

      // Update on visibility change (tab switch)
      document.addEventListener("visibilitychange", () => {
        const currentTheme = document.documentElement.dataset.theme;
        if (themeColorMeta && currentTheme) {
          themeColorMeta.content =
            currentTheme === "dark" ? "#1D232A" : "#FFFFFF";
        }
      });
    </script>
  </head>
  <body class="bg-base-100 text-base-content">
    <NavBar />
    <main class="relative">
      <slot />
    </main>
  </body>
</html>
