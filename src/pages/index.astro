---
import NavBar from "../components/NavBar.astro";
import Game from "../components/Game.vue";
import About from "../layouts/About.astro";
// import Footer from "../layouts/Footer.astro";
---

<html lang="en">
  <head>
    <!-- Standard meta tags -->
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      name="description"
      content="Hi, I'm Nine. Welcome to my personal portfolio, built with Astro, where I showcase my projects, achievements, and passion for web development and gaming."
    />

    <!-- Open Graph meta tags -->
    <meta property="og:title" content="Nine" />
    <meta
      property="og:description"
      content="Hi, I'm Nine. Welcome to my personal portfolio, built with Astro, where I showcase my projects, achievements, and passion for web development and gaming."
    />
    <!-- <meta
    property="og:image"
    content="https://yourwebsite.com/path/to/image.jpg"
  /> -->
    <meta property="og:url" content="https://nine.is-a.dev" />
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content="Nine's Personal Site" />

    <title>Nine</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  </head>
  <NavBar />
  <section class="mx-auto hero min-h-screen" id="home">
    <div class="hero-content flex-col lg:flex-row items-center">
      <div class="text-center lg:text-left">
        <h1 class="text-6xl font-bold">
          Hello I'm <span class="text-primary whitespace-nowrap">Nine</span>
        </h1>
        <h2 class="text-3xl font-bold">
          I'm a <span id="typewriter" class="text-primary font-bold"></span>
        </h2>
      </div>
      <Game client:only class="w-96 h-96 lg:text-right lg:ml-8" />
    </div>
  </section>

  <!-- Scroll Down Icon -->
  <a
    href="#about"
    class="scroll-down absolute bottom-4 flex justify-center items-center w-full"
    aria-label="Scroll Down to About"
    id="scrollLink"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-6 w-6"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M19 13l-7 7-7-7m14-8l-7 7-7-7"></path>
    </svg>
  </a>

  <section class="hero min-h-screen bg-base-200" id="about">
    <About />
  </section>

  <script is:inline type="module">
    /**
     * Animates a typewriter effect on a given HTML element by iterating over an array of words.
     * Each word is typed out letter by letter, then deleted, and the next word is typed.
     *
     * @param {string} elementId - The ID of the HTML element where the typewriter effect is applied.
     * @param {string[]} words - An array of strings representing the words to be typed out.
     * @param {number} [speed=100] - The typing speed in milliseconds for each character.
     * @param {number} [deleteSpeed=50] - The deletion speed in milliseconds for each character.
     */
    function typewriterEffect(elementId, words, speed = 100, deleteSpeed = 50) {
      let i = 0;
      let currentWord = "";
      let currentIndex = 0;
      const element = document.getElementById(elementId);

      if (!element) return;

      /**
       * Types the next word in the array letter by letter.
       */
      const typeNextWord = () => {
        currentWord = words[i];
        currentIndex = 0;
        element.innerHTML = ""; // Clear the previous content

        // Type the word
        typeLetterByLetter();
      };

      /**
       * Types the next character of the current word.
       */
      const typeLetterByLetter = () => {
        if (currentIndex < currentWord.length) {
          // Append the next character to the element
          element.innerHTML += currentWord.charAt(currentIndex);
          currentIndex++;
          setTimeout(typeLetterByLetter, speed);
        } else {
          // Once the word is typed, start deleting it
          setTimeout(deleteWord, speed * 2); // Add a delay before deletion starts
        }
      };

      /**
       * Deletes the current word letter by letter.
       */
      const deleteWord = () => {
        if (currentIndex > 0) {
          // Remove the last character
          element.innerHTML = element.innerHTML.slice(0, -1);
          currentIndex--;
          setTimeout(deleteWord, deleteSpeed);
        } else {
          // Once the word is deleted, move to the next word
          i = (i + 1) % words.length; // Loop through words
          setTimeout(typeNextWord, speed * 2); // Add a delay before typing the next word
        }
      };

      // Start the animation by typing the first word
      typeNextWord();
    }

    // Usage
    const words = ["Developer", "Gamer", "Student];
    const elementId = "typewriter";

    document.addEventListener("DOMContentLoaded", () => {
      typewriterEffect(elementId, words, 200, 100);
    });

    // Scroll behavior for the smooth scroll on click
    document
      .getElementById("scrollLink")
      .addEventListener("click", function (e) {
        e.preventDefault(); // Prevent the default anchor link behavior

        const target = document.querySelector(this.getAttribute("href"));
        target.scrollIntoView({
          behavior: "smooth",
          block: "start",
        });
      });
  </script>

  <style>
    @media screen and (max-width: 470px) {
      h1 {
        font-size: 3rem;
      }
      h2 {
        font-size: 2rem;
      }
    }

    @media screen and (max-width: 375px) {
      h1 {
        font-size: 2.5rem;
      }
      h2 {
        font-size: 1.5rem;
      }
    }
    /* Bounce Animation for the Scroll Down Icon */
    .scroll-down {
      animation: scroll-down 2s infinite;
    }

    @keyframes scroll-down {
      0% {
        transform: translateY(-10px);
      }
      50% {
        transform: translateY(0);
      }
      100% {
        transform: translateY(-10px);
      }
    }

    /* Enable smooth scrolling for anchor links */
    html {
      scroll-behavior: smooth;
    }
  </style>


</html>
